import e from"../metadata.json"assert{type:"json"};import{valueInObj as n}from"node-utils";const t="0-9",r=["mobile","premiumRate","tollFree","sharedCost","voip","personalNumber","pager","uan","voicemail"],o=["premiumRate","tollFree","sharedCost","voip","personalNumber","pager","uan","voicemail","fixedLine","mobile"],i=e=>o.reduce(((n,t)=>{const r=e[t];if(!r)return n;const o=r?.nationalNumberPattern.replace(/\s/g,""),i=s(r.possibleLengths.national);return o&&(n[t]={pattern:o,possibleLengths:i}),n}),{}),s=e=>{const n=[];for(const t of e.split(",")){if(!t.trim())throw new Error;const e=t.match(/^\[(\d+)-(\d+)\]$/);if(e){const[,t,r]=e.map(Number);if(r-t<2)throw new Error;for(let e=t;e<=r;e++){if(n.includes(e))throw new Error;n.push(e)}}else{const e=Number(t);if(isNaN(e)||n.includes(e))throw new Error;n.push(e)}}return n},a=e=>{const n=i(e),t=[];for(const e of Object.keys(n)){const r=n[e]?.possibleLengths;for(const e of r)t.push(e);n[e].possibleLengths=r}return t.sort(((e,n)=>e-n))},u=(e,n,t)=>{const r=i(n),o=t?r[t]:void 0,s=o?.possibleLengths||a(n);if(t&&!o)return"INVALID_LENGTH";const u=e.length,l=s[0];return l===u?"IS_POSSIBLE":l>u?"TOO_SHORT":s[s.length-1]<u?"TOO_LONG":s.indexOf(u,1)>=0?"IS_POSSIBLE":"INVALID_LENGTH"},l=(e="",n)=>new RegExp("^(?:"+n+")$").test(e),c=({nationalNumber:e,countryMetadata:n})=>{const t=i(n),o=n.generalDesc.nationalNumberPattern;if(0!==Object.keys(t).length&&l(e,o)){if(f(e,t.fixedLine))return""===t.mobile.pattern?"fixedLineOrMobile":t.mobile?f(e,t.mobile)?"fixedLineOrMobile":"fixedLine":"fixedLineOrMobile";for(const n of r)if(f(e,t[n]))return n}},f=(e,n)=>{if(!n)return!1;const{pattern:t,possibleLengths:r}=n;return!!r.includes(e.length)&&l(e,t)},g=e=>`([${t}]{1,${e}})`,d=new RegExp("(?:"+(()=>{const e="[ \t,]*",n="[:\\.]?[ \t,-]*",t="#?",r="[ \t]*";return";ext="+g("20")+"|"+(e+"(?:e?xt(?:ensi(?:o?))?n?|anexo)"+n+g("20")+t)+"|"+(e+"(?:[x#~]|int)"+n+g("9")+t)+"|"+("[- ]+"+g("6")+"#")+"|"+(r+"(?:,{2}|;)"+n+g("15")+t)+"|"+(r+"(?:,)+"+n+g("9")+t)})()+")$","i"),h="([0-9]|[\\-\\.\\(\\)]?)",b=new RegExp("^\\+"+h+"*["+t+"]"+h+"*$","g"),p=new RegExp("^([0-9]+((\\-)*[0-9])*\\.)*[a-zA-Z]+((\\-)*[0-9])*\\.?$","g"),m="tel:",x=";phone-context=",N=e=>{const n=(e=>{const n=e.indexOf(x);if(n<0)return null;const t=n+15;if(t>=e.length)return"";const r=e.indexOf(";",t);return r>=0?e.substring(t,r):e.substring(t)})(e);if(!(e=>null===e||0!==e.length&&(b.test(e)||p.test(e)))(n))throw new Error("NOT_A_NUMBER");let t;if(null===n){if(e.length>250)throw new Error("TOO_LONG");t=e}else{t="","+"===n.charAt(0)&&(t+=n);const r=e.indexOf(m);let o;o=r>=0?r+4:0;const i=e.indexOf(x);t+=e.substring(o,i)}const r=t.indexOf(";isub=");if(r>0&&(t=t.substring(0,r)),""!==t)return t},w=(e,n)=>{const t=((e,n)=>{const t=n.nationalPrefixForParsing||n.nationalPrefix,r=n.nationalPrefixTransformRule;if(t){const n=new RegExp("^(?:"+t+")"),o=n.exec(e);if(o){const t=o.length-1,i=t>0&&o[t];if(r&&i)return e.replace(n,r);{const n=o[0];return e.slice(n.length)}}}return e})(e,n);if(t!==e){if(!O({planMetadata:n,nationalNumberBefore:e,nationalNumberAfter:t}))return e;if(a(n)&&!y(t,n))return e}return t},O=e=>{const{nationalNumberBefore:n,nationalNumberAfter:t,planMetadata:r}=e,o=r.generalDesc.nationalNumberPattern;return!(l(n,o)&&!l(t,o))},y=(e,n)=>{switch(u(e,n)){case"TOO_SHORT":case"INVALID_LENGTH":return!1;default:return!0}},L=e=>{const n=N(e);if(!n)return{};if(!(e=>e.length>=2)(n))return{};const t=(e=>{const n=e.search(d);if(n<0)return;const t=e.slice(0,n),r=e.match(d);if(!r)return;let o=1;for(;o<r.length;){if(r[o])return{number:t,ext:r[o]};o++}})(n);return t||{number:n}},E=t=>{const{number:r,ext:o}=L(t);if(!r)throw new Error("Invalid phone number");const{countryCallingCode:i,number:s}=(t=>{if("+"!==t[0])return{number:t};if("0"===t[1]||t.length<=3)return{};let r=2;for(;r-1<=3&&r<=t.length;){const i=t.slice(1,r);if(n(o=i,e.countryCallingCodes)||n(o,e.nonGeographic))return{countryCallingCode:i,number:t.slice(r)};r++}var o;return{}})(I(r));if(!i)throw new Error("Invalid phone number");const a=w(I(s),(({callingCode:t})=>{if(n(t,e.countryCallingCodes)){const r=e.countryCallingCodes[t][0];if(n(r,e.countries))return e.countries[r]}if(n(t,e.nonGeographic))return e.nonGeographic[t];throw new Error(`Unknown calling code: ${t}`)})({callingCode:i})),{country:f,countryMetadata:g}=((t,r)=>{if(!n(t,e.countryCallingCodes))return n(t,e.nonGeographic)?{countryMetadata:e.nonGeographic[t]}:{};const o=e.countryCallingCodes[t];for(const t of o){if(!n(t,e.countries))continue;const o=e.countries[t];if(o)if("leadingDigits"in o){if(0===r.search(o.leadingDigits))return{country:t,countryMetadata:o}}else if(c({nationalNumber:r,countryMetadata:o}))return{country:t,countryMetadata:o}}return n(o[0],e.countries)?{countryMetadata:e.countries[o[0]],country:o[0]}:{country:o[0]}})(i,a);if(!a||a.length<2||a.length>17)throw new Error("Invalid phone number");const d=g?c({nationalNumber:a,countryMetadata:g}):void 0;return{country:f,phone:a,countryCallingCode:i,number:`+${i}${a}`,nationalNumber:a,possible:!!g&&"IS_POSSIBLE"===u(a,g),valid:!!g&&(void 0!==d||l(a,g.generalDesc.nationalNumberPattern)),type:d,ext:o}},C=e=>{const n=e.charCodeAt(0);return n>=48&&n<=57},I=e=>{let n="";if(!e)return n;for(const t of e.split(""))("+"===t&&!n||C(t))&&(n+=t);return n};export{E as parsePhoneNumber};
